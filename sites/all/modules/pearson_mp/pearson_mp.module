<?php
// hook_menu
function pearson_mp_menu(){
	$items = array();
	$items['mp/test'] = array(
		'type' => MENU_NORMAL_ITEM,		
		'title' => 'mp test',		
		'description' => 'test for ReST',		
		'page callback' => '_debug_mp',
		'page arguments' => array('hardcoded'),
		'access callback' => TRUE,
		'expanded' => TRUE,
  );
  
  $items['mp/test/prof'] = array(
    'title' => 'Prof form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mpProf'),
    'access callback' => TRUE,
    'description' => 'we want to find details about this professor',
    'type' => MENU_NORMAL_ITEM,
  );
    
  return $items;
}

// hook cron
function pearson_mp_cron(){
	drupal_set_message('ran cron purvis');
    $queue = DrupalQueue::get("pearsonSync");
	
    foreach (remotePearson() as $data) {
      $queue->createItem($data);
    }	
}

// tell drupal we have a queue to work on during cron
function mymodule_cron_queue_info() {
  $queues = array();
  $queues['pearsonSync'] = array(
    'worker callback' => 'PearsonUpdateOrAdd', //function to call for each item
    'time' => 60, //seconds to spend working on the queue
  );
  return $queues;
}

// this will actually update a node or create new ones
function PearsonUpdateOrAdd(){
	
}


// this fetches the information from Pearson WSOD
function remotePearson(){
	$ret = array();
	// get list of professor id's that are tagged with "include me in cron"
	//		prof => id
	$query = db_select('node', 'n');
	$query->join('field_data_field_pearson_include_cron', 'b', 'n.nid = b.entity_id');
	$query
	  ->fields('n', array('nid', 'title'))
	  ->condition('n.type', 'pearson_prof')
	  ->condition('n.status', '1')
	->condition('b.field_pearson_include_cron_value', 1);
	$result = $query->execute()->fetchAll();
	foreach ($result as $key => $value) {
		$ret['prof'][] = $value->title;
	}
	//dsm($result, 'result');		
	dsm($ret, 'return value');
	return $ret;
}

/*
	$ret = array();
	// get list of professor id's that are tagged with "include me in cron"
	//		prof => id
	$query = db_select('node', 'n');
	$query->join('field_data_field_pearson_include_cron', 'b', 'n.nid = b.entity_id');
$query->leftJoin('field_data_field_pearson_prof_courses', 'c', 'n.nid = c.entity_id');
	$query
	  ->fields('n', array('nid', 'title'))
->fields('c', array('field_pearson_prof_courses_value'))
	  ->condition('n.type', 'pearson_prof')
	  ->condition('n.status', '1')
	->condition('b.field_pearson_include_cron_value', 1);
	$result = $query->execute()->fetchAll();
	foreach ($result as $key => $value) {
		$ret['prof'][] = $value->title;
	}
	dsm($result, 'result');		
	dsm($ret, 'return value');
 */

// curl stuff
/*
$application_id 	= '5d290fc1-cb0e-4684-bb73-2ec9a3a72f30'; 
$client_string 		= 'gbtestc'; 
$username 			= 'purvisteacher'; 
$password 			= 'letmein'; 
 
 
 
$post_request = 'grant_type=password'
				.'&client_id='.$application_id
	   			.'&username='.$client_string.'\\'.$username
	   			.'&password='.$password; 
 
 
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, 'https://m-api.ecollege.com/token');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
//curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
curl_setopt($ch, CURLOPT_POST, 1);

curl_setopt($ch, CURLOPT_POSTFIELDS, $post_request);
 
// This next opton bypasses some SSL stuff that often trips up 
// local development environments' curl. Shouldn't be needed/used in production
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
 
 
$api_response = curl_exec($ch); 
 
$curlError = curl_error($ch);
 
$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
 
if($curlError){
 
	 dsm($curlError, "There was a problem making the API Call. cURL problem"); 
 
} else if(intval($http_code / 100) >=4){
 
	$decoded = json_decode($api_response); 
	$msg = (is_object($decoded) && isset($decoded->error->message))?$decoded->error->message:"No message reported."; 
	$msg.= " Error ID: "; 
	$msg.= (is_object($decoded) && isset($decoded->error->errorId) && !empty($decoded->error->errorId))?$decoded->error->errorId:'None provided';  
	dsm($http_code, "The API Server responded with http_code");
	dsm($msg, "Message"); 
 
} else {
 
	$decoded_response = json_decode($api_response); 
	dsm($decoded_response); 
 
}
 */

function _debug_mp($arg = NULL){
	return '<h1>here and also</h1> some ' . $arg . ' the end';
}

function _mpProf($form, &$form_state) {
  $prof_id = arg(3); //(empty(arg(3))) ? '' : arg(3);
  dsm($prof_id, 'prof_id');
  
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Enter the Name and ID of a Professor'),
  );
  // This is the first form element. It's a textfield with a label, "Name"
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
  );
  // _mpcurl(19, 'professor');
  _mpcurl();
  return $form;
}

function _mpcurl($id = NULL, $type = NULL){
	$apikey = get_api_key();
	dsm($apikey, 'API Key');
	
	if (isset($id)) dsm($id, 'id');	
	if (isset($type)) dsm($type, 'type');
	
	$curl_handle = curl_init();  
	curl_setopt_array($curl_handle, array(
		CURLOPT_URL => 'http://www.mikedotexe.com/index.php/app/plants',
	    CURLOPT_RETURNTRANSFER => 1,
	    CURLOPT_POST => 0,
	));

	
	// Optional, delete this line if your API is open  
	// curl_setopt($curl_handle, CURLOPT_USERPWD, $username . ':' . $password);  	
	
	$buffer = curl_exec($curl_handle);  
	curl_close($curl_handle);  
	  
	$result = json_decode($buffer);  
	dsm($result, 'result');
	return $result;
}

function get_api_key(){
	include('mykey.php');
	return $apikey;
}
