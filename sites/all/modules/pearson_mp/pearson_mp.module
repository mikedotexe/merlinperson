<?php
// TODO: make a more error-proof require later
require_once 'sites/all/libraries/CryptLib/bootstrap.php'; // for doing encryption

function pearson_mp_views_api(){
	return array('api' => 2);
}

// hook_menu
function pearson_mp_menu(){
	$items = array();
	$items['mp/test'] = array(
		'type' => MENU_NORMAL_ITEM,		
		'title' => 'mp test',		
		'description' => 'test for ReST',		
		'page callback' => '_debug_mp',
		'page arguments' => array('hardcoded'),
		'access callback' => TRUE,
		'expanded' => TRUE,
  );
  
  $items['mp/test/prof'] = array(
    'title' => 'Prof form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mpProf'),
    'access callback' => TRUE,
    'description' => 'we want to find details about this professor',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/settings/pearson_mp'] = array(
    'title' => 'Pearson Settings',
    'description' => 'Change/view Application ID, Client String, etc.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_pearson_settings'),
    'access arguments' => array('administer pearson settings'),
    'type' => MENU_NORMAL_ITEM,
   );    
    
  return $items;
}

function _pearson_settings() {
  $form = array();

  $form['pearson_app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Pearson Application ID'),
    '#default_value' => variable_get('pearson_app_id'),
    '#description' => t("Used for all clients."),
    '#required' => TRUE,
  );
  $form['pearson_client_string'] = array(
    '#type' => 'textfield',
    '#title' => t('Pearson Client String'),
    '#default_value' => variable_get('pearson_client_string'),
    '#description' => t("Unique for Integration Campus."),
    '#required' => TRUE,
  );
  $form['pearson_term_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter current Term ID'),
    '#default_value' => variable_get('pearson_term_id'),
    '#required' => TRUE,
  );
  $form['pearson_consumer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Consumer Key (AKA: Token Key Moniker)'),
    '#default_value' => variable_get('pearson_consumer_key'),
    '#required' => TRUE,
  );
  $form['pearson_consumer_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Consumer Secret (AKA: Shared Secret)'),
    '#default_value' => variable_get('pearson_consumer_secret'),
    '#required' => TRUE,
  );
  
  // TODO: add submit button to reset all bundles

  return system_settings_form($form);
}

function pearson_mp_permission() {
  return array(
    'administer pearson settings' => array(
      'title' => t('Access and change Pearson settings'),
      'description' => t('Allow users to access the settings page, change Application ID, etc...'),
    ),
	'pearson see all students' => array(
	  'title' => t('Allowed to see other students in the system, basic information like email and classes'),
	  'description' => t('On by default')
    ),
	'pearson see all grades' => array(
	  'title' => t('Allowed to see other students\' grades'),
	  'description' => t('Perhaps for teachers and teaching assistants')
    )
	);
}
// hook cron
function pearson_mp_cron(){
	watchdog('pearson_mp', 'ran cron');
    $queueCoursesFromTerm = DrupalQueue::get("pearsonCourseFromTerm");
    // $queueUsersInCourses = DrupalQueue::get("pearsonUserFromCourse");
	
	// get list of courses from the term_id
	// TODO: check to make sure they have visited the settings page and filled in all values
	$remoteAll = remoteOAuth1('/terms/' . variable_get('pearson_term_id') . '/courses'); //remotePearson();
	//dsm($remoteAll, 'remoteOAuth1');
	//var_dump($remoteAll, 'remoteOAuth1');
	if (is_array($remoteAll->courses)){ // this helps block warnings
		foreach ($remoteAll->courses as $k => $v){
		  // dsm($k, 'k'); // $k->id, ->displayCourseCode, ... title, callNumbers (array), links (array of Objects->href, ->rel)
		  
		  // now that we know who to attach to a course, create/update course nodes
		  $queueCoursesFromTerm->createItem($v);
		}			
	}
 
	/*
	$remoteProf = $remoteAll['prof'];
    foreach ($remoteProf as $data) {
      $queueCoursesFromTerm->createItem($data);
    }
	 */	
}

// tell drupal we have a queue to work on during cron
function pearson_mp_cron_queue_info() {
  $ret = array();
  $ret['pearsonCourseFromTerm'] = array(
    'worker callback' => 'PearsonUpdateOrAdd', //function to call for each item
    'time' => 600, //seconds to spend working on the queue
  );
  // $ret['pearsonUserFromCourse'] = array(
    // 'worker callback' => 'PearsonUpdateOrAddUser', //function to call for each item
    // 'time' => 600, //seconds to spend working on the queue
  // );
  return $ret;
}

function remoteOAuth1($route){
	// Set up the variables necessary to make the Request 
	$method          = 'GET'; 
	$application_id  = variable_get('pearson_app_id');  //Your Application's ID/Key. Use for all campuses.
	$consumer_key    = variable_get('pearson_consumer_key');    //Campus-specific 
	$consumer_secret = variable_get('pearson_consumer_secret'); //Campus-specific  
	$nonce           = md5(microtime());   //Random & unique for every call
	$api_route       = $route;            //The API call you're requesting
	$post_body       = '{requestBody}';    //POST or PUT body
	$request_url     = 'https://m-api.ecollege.com'.$api_route;  
	 
	 
	// Define OAuth Parameters
	$oAuthVariables = array(); 
	$oAuthVariables['application_id'] = $application_id; 
	$oAuthVariables['oauth_consumer_key'] = $consumer_key; 
	$oAuthVariables['oauth_nonce'] = $nonce; 
	$oAuthVariables['oauth_signature_method'] = 'CMAC-AES';
	$oAuthVariables['oauth_timestamp'] = time();
	 
	 
	// Create a Signable String
	// If this is a POST or PUT we tack on the body as a parameter 
	// *only* for the signable string. The body is base64 encoded, and then 
	// url-encoded TWICE. 
	$signable_string = $method.'&'.urlencode($api_route).'&'; 
	 
	$StringParts = $oAuthVariables; 
	if($method=='POST' || $method=='PUT')                               
		$StringParts['body'] = urlencode(urlencode(base64_encode($post_body))); 
	 
	ksort($StringParts); 
	 
	$encodable = array(); 
	 
	foreach($StringParts as $key=>$value){ 
		$encodable[] = $key.'='.$value; 
	} 
	 
	$signable_string.=urlencode(implode('&',$encodable)); 
	 
	 
	// Get a Signature for the string. Signature is an AES-CMAC hash.
	$CMACEngine = new CryptLib\MAC\Implementation\CMAC;
	 
	$packed_string = ''; 
	$stringlength = strlen($signable_string); 
	for($i=0; $i<$stringlength; $i++) { 
	    $packed_string .= pack("c", ord(substr($signable_string, $i, 1))); 
	} 		
	//dsm($packed_string, 'packed string'); 
	$binary_cmac = $CMACEngine->generate($packed_string,$consumer_secret); 
	//dsm($binary_cmac, 'binary cmac');
	
	$signature = base64_encode($binary_cmac);
	//dsm($signature, 'siggy');
	//return; 
	 
	// Create the OAuth HTTP Header 
	$header_vars = array('realm'=>$request_url); 
	$header_vars = array_merge($header_vars,$oAuthVariables); 
	$header_vars['oauth_signature'] = $signature; 
	 
	$header_parts = array(); 
	foreach($header_vars as $k=>$v){ 
		$v = ($k=='realm')?$v:urlencode($v); 
		$header_parts[] = $k.'="'.$v.'"'; 
	} 
	 
	$oauth_http_header = "X-Authorization: OAuth ".implode(',',$header_parts);
	 	 
	// Use cURL to make the request 
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $request_url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // used to be 0 and worked
	curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US)'); 
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
	curl_setopt($ch, CURLOPT_HTTPHEADER, array($oauth_http_header)); 
	if($method=='POST' || $method=='PUT')
		curl_setopt($ch, CURLOPT_POSTFIELDS, $post_body);
	 	 
	// Execute & get variables
	$api_response = curl_exec($ch);
	$curlError = curl_error($ch);
	$info = curl_getinfo($ch); 
	$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
	 
	// Test if there was a cURL problem (request didn't go through)
	if($curlError){
	 	 watchdog('pearson_mp', $curlError . " - There was a problem making the API Call. cURL problem");
		 //dsm($curlError, "There was a problem making the API Call. cURL problem"); 
	 
	// Test if there is a 4XX error (request went through but erred). 
	} else if(intval($http_code / 100) >=4){
	 
		$decoded = json_decode($api_response); 
		$msg = (is_object($decoded) && isset($decoded->error->message))?$decoded->error->message:"No message reported.";
		$msg.= " Error ID: "; 
		$msg.= (is_object($decoded) && isset($decoded->error->errorId) && !empty($decoded->error->errorId))?$decoded->error->errorId:'None provided';  
	 	watchdog('pearson_mp', $msg . " - The API Server responded with ".$http_code.". Message was:".$info." route:". $route);
		//dsm($msg, "The API Server responded with ".$http_code.". Message was:"); 
	 
	// Else you have a successful response. 
	} else {
	 
		$decoded_response = json_decode($api_response); 
		// dsm($decoded_response);  
		return $decoded_response;
	}	
}

// $item will be an individual course for the term
/* $item->id, 
		->displayCourseCode
 * 		->title
 * 		->callNumbers (array)
 * 		->links (array)
 * 			0->href
 * 			 ->rel
 */
function PearsonUpdateOrAdd($item){
	// This essentially has each item that looks like what is returned from 
	//dsm($item, 'item in the actual worker function');
	
	// see if we have a node with that Pearson ID (not Drupal nid, or Node ID)
	// if so, return the nid, if not, return blank
	$findCourseID = $item->id;
	$query = db_select('node', 'n');
	$query->join('field_data_field_pearson_course_number', 'b', 'n.nid = b.entity_id');
	$query
	  ->fields('n', array('nid', 'vid'))
	  ->condition('n.type', 'pearson_course')
	  ->condition('b.field_pearson_course_number_value', $findCourseID);
	$result = $query->execute()->fetchAll();
// begin - add users	
	  // we'll be using this below to add users to a course
	  $item->entity_reference = array(); 
	  
	  // get the User Enrollment information on this course
	  $remoteUsersForCourse = remoteOAuth1('/courses/' . $findCourseID . '/enrolledUsers');
	  // loop through, adding to queue, and also adding person to parent foreach, so we can reference them in the course node later		  
	  if (is_array($remoteUsersForCourse->enrolledUsers)){
	  	foreach ($remoteUsersForCourse->enrolledUsers as $user) {
	  		//dsm($user, 'user');
	  		//dsm($user->user->firstName, 'fname');
			// $queueUsersInCourses->createItem($user);
			
			// attach Pearson UID to the course information				
			$item->entity_reference[] = $user;			
			
		}
	  }	
// end - add users	  
	
	//dsm($result, 'result from trying to fetch course id ' . $findCourseID);
		
		  			
	$newNode = (object) NULL;
	$newNode->type = 'pearson_course';
	$newNode->uid = 1;
	$newNode->changed = strtotime("now");
	$newNode->status = 1;
	$newNode->comment = 0;
	$newNode->promote = 0;
	$newNode->moderate = 0;
	$newNode->sticky = 0;
	$newNode->language = 'und';

	$newNode->field_pearson_course_number[LANGUAGE_NONE][0]['value'] = $findCourseID;
	$newNode->field_pearson_course_code[LANGUAGE_NONE][0]['value'] = $item->displayCourseCode;
	$newNode->title = $item->title;
	
	// call numbers
	for ($i=0; $i < count($item->callNumbers); $i++) { 
		$newNode->field_pearson_call_numbers[LANGUAGE_NONE][$i]['value'] = $item->callNumbers[$i];	
	}
	// links
	for ($i=0; $i < count($item->links); $i++) { 
		$newNode->field_pearson_links[LANGUAGE_NONE][$i]['value'] = $item->links[$i]->href;
		$newNode->field_pearson_links[LANGUAGE_NONE][$i]['value'] = 'working?';
	}
	
	
	// if we are updating this node (if the Course ID already exists in the system)
	if (!empty($result)){
		// we're updating this node
		//dsm('not empty');
		$newNode->nid = $result[0]->nid;
		$newNode->vid = $result[0]->nid; // will throw notice without this line
		// $newNode->is_new = FALSE;
	} else {
		// we're creating this node
		$newNode->created = strtotime("now");	
		$newNode->is_new = TRUE;	
	}
	
	// TODO: add all the entity references stored in (i think) $item->entity_reference (array)
	$i = 0;
	foreach ($item->entity_reference as $user) {		
		$drupalUID = PearsonUpdateOrAddUser($user); // returns the drupal UID
		$newNode->field_pearson_course_users[LANGUAGE_NONE][$i]['target_id'] = $drupalUID; // add this to the entity reference for course
		$newNode->field_pearson_course_users[LANGUAGE_NONE][$i]['target_type'] = 'user'; // required
		$i++; // iterate
	}
	
	node_save($newNode);		
}

// returns UID of the newly created, or already existing user that's passed in as a parameter
function PearsonUpdateOrAddUser($item2){
	// see if the user has a Drupal account
	// $debug1 = serialize($item2);
	// watchdog('pearson_mp', $debug1);
	$query = db_select('users', 'u');
	$query->join('field_data_field_pearson_user_id', 'p', 'u.uid = p.entity_id');
	$query
		->fields('u', array('uid'))
		->condition('p.field_pearson_user_id_value', $item2->id);
	$result = $query->execute()->fetchAll();
	
	// find out which roles to apply
	// 823 => PROF
	// 430 => TAST
	// 916 => STUD
	// watchdog('pearson_mp', 'setting initial auth role');
	$role = array(DRUPAL_AUTHENTICATED_RID => 'authenticated user');
	switch ($item2->role->id) {
		case '823':
			// watchdog('pearson_mp', 'setting prof');
			$role[variable_get('Pearson Professor')] = 'Pearson Professor';
			break;
		case '430':
			// watchdog('pearson_mp', 'setting ta');
			$role[variable_get('Pearson TA')] = 'Pearson TA';
			break;
		case '916':
		// watchdog('pearson_mp', 'setting student');
			$role[variable_get('Pearson Student')] = 'Pearson Student';
			break;
	}
	
	if (empty($result)){
		// we create a new user using user_save API
			// TODO: add specific roles automatically
		  $password = user_password(8);		 
		  //set up the user fields
		  $fields = array(
		    'name' => $item2->user->firstName . ' ' . $item2->user->lastName,
		    'mail' => $item2->user->emailAddress,
		    'pass' => $password,
		    'status' => 1,
		    'init' => 'email address',
		    'roles' => $role,
		    'field_pearson_user_id' => array(LANGUAGE_NONE => array(0 => array('value' => $item2->id))),
		  ); 
		 
		  //the first parameter is left blank so a new user is created
		  $account = user_save('', $fields);
		  return $account->uid;	// uid of the newly created user
	} else {
			// we can choose to update the user information
			// TODO: add check to see if they have a setting flagged (not yet on settings page)		
		  $account = user_load($result[0]->uid);
		
		  $fields = array(
		    'name' => $item2->user->firstName . ' ' . $item2->user->lastName,
		    'roles' => $role,
		    'field_pearson_user_id' => array(LANGUAGE_NONE => array(0 => array('value' => $item2->id))),
		  ); 
		 
		  // updates the user
		  user_save($account, $fields);				
		
		  return $result[0]->uid; // this is the uid of the existing user					
	}		
}


function pearson_mp_form_alter(&$form, &$form_state, $form_id){
	// dsm($form, 'form');
	// dsm($form_id, 'form_id');
} 

function pearson_mp_form_user_profile_form_alter(&$form, &$form_state){
	// dsm(_decryptFromUID(1));
	$form['#validate'][] = '_profile_submit';
}

function _profile_submit(&$form, &$form_state){
	// dsm($form_state, 'fs');
	$enc = encrypt($form_state['values']['field_pearson_prof_password'][LANGUAGE_NONE][0]['value']);
	$form_state['values']['field_pearson_prof_password'][LANGUAGE_NONE][0]['value'] = bin2hex($enc);
}

function _decryptFromUID($uid){
	$query = db_select('users', 'u');
	$query->join('field_data_field_pearson_prof_password', 'f', 'u.uid = f.entity_id');
	$query->fields('f', array('field_pearson_prof_password_value'));
	$result = $query->execute()->fetchAll();
	$bin = hex2bin($result[0]->field_pearson_prof_password_value);
	$dec = decrypt($bin);
	return $dec;
}

// TODO: not used
// this fetches the information from Pearson WSOD (NOT BEING USED)
function remotePearson(){
	$ret = array();
	// get list of professor id's that are tagged with "include me in cron"
	//		prof => id
	$query = db_select('users', 'n');
	$query->join('field_data_field_pearson_include_cron', 'b', 'n.uid = b.entity_id');
	$query->join('users_roles', 'c', 'n.uid = c.uid');
	$query->join('role', 'r', 'c.rid = r.rid');
	$query
	  ->fields('n', array('uid', 'mail'))
	  ->condition('b.field_pearson_include_cron_value', 1)
	  ->condition('r.name', 'prof');
	$result = $query->execute()->fetchAll();
	foreach ($result as $key => $value) {
		// $ret['prof'][$value->uid] = $value->mail;
		$ret['prof'][] = array('uid' => $value->uid, 'email' => $value->mail);		
	}
	//dsm($result, 'result');		
	// dsm($ret, 'return value');
	return $ret;
}

// code to create a course node programmatically
/* 

$newNode = (object) NULL;
$newNode->type = 'pearson_course';
$newNode->uid = 1;
$newNode->created = strtotime("now");
$newNode->changed = strtotime("now");
$newNode->status = 1;
$newNode->comment = 0;
$newNode->promote = 0;
$newNode->moderate = 0;
$newNode->sticky = 0;
$newNode->language = 'und';
$newNode->title = "test";
$newNode->field_pearson_course_number[LANGUAGE_NONE][0]['value'] = "this###";
node_save($newNode);
 
 */
//----------------------------------
/*
	$ret = array();
	// get list of professor id's that are tagged with "include me in cron"
	//		prof => id
	$query = db_select('node', 'n');
	$query->join('field_data_field_pearson_include_cron', 'b', 'n.nid = b.entity_id');
$query->leftJoin('field_data_field_pearson_prof_courses', 'c', 'n.nid = c.entity_id');
	$query
	  ->fields('n', array('nid', 'title'))
->fields('c', array('field_pearson_prof_courses_value'))
	  ->condition('n.type', 'pearson_prof')
	  ->condition('n.status', '1')
	->condition('b.field_pearson_include_cron_value', 1);
	$result = $query->execute()->fetchAll();
	foreach ($result as $key => $value) {
		$ret['prof'][] = $value->title;
	}
	dsm($result, 'result');		
	dsm($ret, 'return value');
 */
//---------------------------------------------------
// curl stuff

function remoteOAuth2Tokens($uid = NULL, $u = NULL, $p = NULL){

	// in this case we have the uid and the email of the professor
	// let's get the token based on his/her username and password
	$ret = array();
	// get list of professor id's that are tagged with "include me in cron"
	//		prof => id
	$query = db_select('users', 'u');
	$query->join('field_data_field_pearson_prof_username', 'n', 'u.uid = n.entity_id');
	$query->join('field_data_field_pearson_prof_password', 'p', 'u.uid = p.entity_id');
	$query
	  ->fields('n', array('field_pearson_prof_username_value'))
	  ->fields('p', array('field_pearson_prof_password_value'))
	  ->condition('u.uid', $uid);
	$result = $query->execute()->fetchAll();
	// returns a result like this for username: $result[0]->field_pearson_prof_username_value
	
	// if (isset($result[0]->field_pearson_prof_username_value) && isset($result[0]->field_pearson_prof_password_value)){
		// both of them are set, let's request that token from Pearson LearningStudio
		$application_id = variable_get('pearson_app_id'); // this must be set by the client, stored as a Drupal variable using variable_set() API call
		$client_string = variable_get('pearson_client_string');
		// if there are arguments for these sent in, then use them 
		$username = (isset($u)) ? $u : $result[0]->field_pearson_prof_username_value; 
		$password = isset($p) ? $p : $result[0]->field_pearson_prof_password_value;
		
		$post_request = 'grant_type=password'
						.'&client_id='.$application_id
			   			.'&username='.$client_string.'\\'.$username
			   			.'&password='.$password; 

		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, 'https://m-api.ecollege.com/token');
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
		curl_setopt($ch, CURLOPT_POSTFIELDS, $post_request);
		 
		// TODO: remove below, only for competition sprint 
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
		 
		$api_response = curl_exec($ch); 		 
		$curlError = curl_error($ch);		 
		$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
		 
		if($curlError){
			watchdog('pearson_mp', $curlError . ' - cURL problem');			 		
			//dsm($curlError, "There was a problem making the API Call. cURL problem"); 		 
		} else if (intval($http_code / 100) >= 4){		 
			$decoded = json_decode($api_response); 
			$msg = (is_object($decoded) && isset($decoded->error->message)) ? $decoded->error->message : "No message"; 
			$msg .= " Error ID: "; 
			$msg .= (is_object($decoded) && isset($decoded->error->errorId) && !empty($decoded->error->errorId)) ? $decoded->error->errorId : 'None provided';  
			watchdog('pearson_mp', $http_code . " - The API Server responded with http_code");
			// dsm($http_code, "The API Server responded with http_code");
			// dsm($msg, "Message"); 		 
		} else {
			// all systems go, we soon have refresh_token, access_token, and expires_in		 
			$decoded_response = json_decode($api_response); 
			return $decoded_response;
			// $decoded_response->access_token is what's really useful here
			//$course_info = getCourseInformation($decoded_response->access_token);
		}			
	// }
}

function remoteOAuth2POSTFile($access){
	// set up header
	$body = 
		'mikedotexe
		Content-Disposition: form-data; name=""; filename="purvis.txt"
		Content-Type: text/plain
		 
		this is the data. aloha.
		mikedotexe';

	$header = 'X-Authorization: Access_Token access_token=' . $access;
	$curl = curl_init();
	
	curl_setopt_array($curl, array(
	    CURLOPT_RETURNTRANSFER => 1,
	    CURLOPT_URL => 'https://m-api.ecollege.com/tempfiles',
	    CURLOPT_POST => 1,
	    CURLOPT_POSTFIELDS => $body,
	    CURLOPT_HTTPHEADER => array($header, 'Content-Type: multipart/form-data; boundary=mikedotexe'),
	    CURLOPT_SSL_VERIFYPEER => 0
	));
		 	
	// Execute & get variables
	$api_response = curl_exec($curl);
	$curlError = curl_error($curl);
	$info = curl_getinfo($curl); 
	$http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
	curl_close($curl);	
	 
	// Test if there was a cURL problem (request didn't go through)
	if($curlError){
	 	 watchdog('pearson_mp', $curlError . " - There was a problem making the API Call. cURL problem in remoteOAuth2POST");
	// Test if there is a 4XX error (request went through but erred). 
	} else if(intval($http_code / 100) >=4){
	 
		$decoded = json_decode($api_response); 
		$msg = (is_object($decoded) && isset($decoded->error->message))?$decoded->error->message:"No message reported.";
		$msg.= " Error ID: "; 
		$msg.= (is_object($decoded) && isset($decoded->error->errorId) && !empty($decoded->error->errorId))?$decoded->error->errorId:'None provided';  
	 	watchdog('pearson_mp', $msg . " - The API Server responded with ".$http_code.". Found in remoteOAuth2POST");
	// Else you have a successful response. 
	} else {	 
		$decoded_response = json_decode($api_response); 
		// dsm($decoded_response);  
		return $decoded_response;
	}
}


function _debug_mp($arg = NULL){
	return '<h1>here and also</h1> some ' . $arg . ' the end';
}

function _mpProf($form, &$form_state) {
  $prof_id = arg(3); //(empty(arg(3))) ? '' : arg(3);
  dsm($prof_id, 'prof_id');
  
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Enter the Name and ID of a Professor'),
  );
  // This is the first form element. It's a textfield with a label, "Name"
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
  );
  // _mpcurl(19, 'professor');
  _mpcurl();
  return $form;
}

function _mpcurl($id = NULL, $type = NULL){
	$apikey = get_api_key();
	dsm($apikey, 'API Key');
	
	if (isset($id)) dsm($id, 'id');	
	if (isset($type)) dsm($type, 'type');
	
	$curl_handle = curl_init();  
	curl_setopt_array($curl_handle, array(
		CURLOPT_URL => 'http://www.mikedotexe.com/index.php/app/plants',
	    CURLOPT_RETURNTRANSFER => 1,
	    CURLOPT_POST => 0,
	));

	
	// Optional, delete this line if your API is open  
	// curl_setopt($curl_handle, CURLOPT_USERPWD, $username . ':' . $password);  	
	
	$buffer = curl_exec($curl_handle);  
	curl_close($curl_handle);  
	  
	$result = json_decode($buffer);  
	dsm($result, 'result');
	return $result;
}

/* called from .install 
 *TODO: unfinished 
 * */

function _import_bundles(){
	watchdog('pearson_mp', 'import bundles called');
	$path = drupal_get_path('module', 'pearson_mp') . '/bundles';
	$dir = new DirectoryIterator($path);
	// dsm($path, 'dir');
	foreach ($dir as $fileinfo) {// loop through each file in the directory
		if (!$fileinfo->isDot()) { // make sure its not . (current directory) or .. (parent directory)
			$filename = $fileinfo->getFilename();
			$contents = file_get_contents($path . '/' . $filename);
			// dsm($filename, 'filename');
			// dsm($contents, 'c');
			
			if (function_exists('bundle_copy_import_submit')){ // function that bundle copy uses to import
				$form = array();
				$form_state = array();
				$form_state['values']['macro'] = $contents;
				// for these imports, work gets done in the _validate and _submit functions to do the actual import
				bundle_copy_import_submit('', $form_state); // function doesn't use first arg
				watchdog('pearson_mp', 'Imported ' . $filename);
			}else{
				$error = 'No bundle_copy_import_submit function found, bundle installation cannot proceed.';
				watchdog('pearson_mp', $error, NULL, WATCHDOG_CRITICAL);
				dsm($error);
			}	 			
		}
	}	
}

function pearson_mp_user_view($account, $view_mode, $langcode){

	$roles = $account->roles;
	unset($roles[2]);
	$printedRoles = implode(', ', $roles);
	// dsm(arg(1));
	
	$account->content['role'] = array(
	 '#type' => 'markup',
	 '#markup' => "<h2>Role(s): $printedRoles</h2>",
	);
	
	// find all classes associated with this user, embed views for each
	$classIDs = classesByUID(arg(1));
	for ($i=0; $i < count($classIDs); $i++) { 
		$view = views_embed_view('pearson_course', 'page', $classIDs[$i]->entity_id);
		$account->content['view' . $i] = array(
		 '#type' => 'markup',
		 '#weight' => 100 + $i,
		 '#markup' => $view,
		);
		
	} 
	

	
	// dsm($account, 'account');
	// dsm($view_mode, 'view mode');	
}

// returns an array like this: 0->entity_id, 1->entity_id

function classesByUID($uid){
	$query = db_select('users', 'u');
	$query->join('field_data_field_pearson_course_users', 'c', 'u.uid = c.field_pearson_course_users_target_id');
	$query	
		->fields('c', array('entity_id'))
		->condition('u.uid', $uid);
	$results = $query->execute()->fetchAll();
	return $results;
}
/*
	$findCourseID = $item->id;
	$query = db_select('node', 'n');
	$query->join('field_data_field_pearson_course_number', 'b', 'n.nid = b.entity_id');
	$query
	  ->fields('n', array('nid', 'vid'))
	  ->condition('n.type', 'pearson_course')
	  ->condition('b.field_pearson_course_number_value', $findCourseID);
	$result = $query->execute()->fetchAll();
	*/